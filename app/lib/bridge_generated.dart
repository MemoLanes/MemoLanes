// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<void> init(
      {required String tempDir,
      required String docDir,
      required String supportDir,
      required String cacheDir,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(tempDir);
    var arg1 = _platform.api2wire_String(docDir);
    var arg2 = _platform.api2wire_String(supportDir);
    var arg3 = _platform.api2wire_String(cacheDir);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_init(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kInitConstMeta,
      argValues: [tempDir, docDir, supportDir, cacheDir],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init",
        argNames: ["tempDir", "docDir", "supportDir", "cacheDir"],
      );

  Future<RenderResult?> renderMapOverlay(
      {required double zoom,
      required double left,
      required double top,
      required double right,
      required double bottom,
      dynamic hint}) {
    var arg0 = api2wire_f32(zoom);
    var arg1 = api2wire_f64(left);
    var arg2 = api2wire_f64(top);
    var arg3 = api2wire_f64(right);
    var arg4 = api2wire_f64(bottom);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_render_map_overlay(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_opt_box_autoadd_render_result,
      parseErrorData: null,
      constMeta: kRenderMapOverlayConstMeta,
      argValues: [zoom, left, top, right, bottom],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRenderMapOverlayConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "render_map_overlay",
        argNames: ["zoom", "left", "top", "right", "bottom"],
      );

  Future<void> onLocationUpdate(
      {required double latitude,
      required double longitude,
      required int timestampMs,
      required double accuracy,
      double? altitude,
      double? speed,
      dynamic hint}) {
    var arg0 = api2wire_f64(latitude);
    var arg1 = api2wire_f64(longitude);
    var arg2 = _platform.api2wire_i64(timestampMs);
    var arg3 = api2wire_f32(accuracy);
    var arg4 = _platform.api2wire_opt_box_autoadd_f32(altitude);
    var arg5 = _platform.api2wire_opt_box_autoadd_f32(speed);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_on_location_update(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kOnLocationUpdateConstMeta,
      argValues: [latitude, longitude, timestampMs, accuracy, altitude, speed],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOnLocationUpdateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "on_location_update",
        argNames: [
          "latitude",
          "longitude",
          "timestampMs",
          "accuracy",
          "altitude",
          "speed"
        ],
      );

  Future<List<RawDataFile>> listAllRawData({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_all_raw_data(port_),
      parseSuccessData: _wire2api_list_raw_data_file,
      parseErrorData: null,
      constMeta: kListAllRawDataConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListAllRawDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_all_raw_data",
        argNames: [],
      );

  Future<bool> getRawDataMode({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_raw_data_mode(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kGetRawDataModeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetRawDataModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_raw_data_mode",
        argNames: [],
      );

  Future<void> toggleRawDataMode({required bool enable, dynamic hint}) {
    var arg0 = enable;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_toggle_raw_data_mode(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kToggleRawDataModeConstMeta,
      argValues: [enable],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kToggleRawDataModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "toggle_raw_data_mode",
        argNames: ["enable"],
      );

  Future<void> finalizeOngoingJourney({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_finalize_ongoing_journey(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kFinalizeOngoingJourneyConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFinalizeOngoingJourneyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finalize_ongoing_journey",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Uint8List _wire2api_ZeroCopyBuffer_Uint8List(dynamic raw) {
    return raw as Uint8List;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  RenderResult _wire2api_box_autoadd_render_result(dynamic raw) {
    return _wire2api_render_result(raw);
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  List<RawDataFile> _wire2api_list_raw_data_file(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_raw_data_file).toList();
  }

  RenderResult? _wire2api_opt_box_autoadd_render_result(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_render_result(raw);
  }

  RawDataFile _wire2api_raw_data_file(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RawDataFile(
      name: _wire2api_String(arr[0]),
      path: _wire2api_String(arr[1]),
    );
  }

  RenderResult _wire2api_render_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return RenderResult(
      left: _wire2api_f64(arr[0]),
      top: _wire2api_f64(arr[1]),
      right: _wire2api_f64(arr[2]),
      bottom: _wire2api_f64(arr[3]),
      data: _wire2api_ZeroCopyBuffer_Uint8List(arr[4]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
