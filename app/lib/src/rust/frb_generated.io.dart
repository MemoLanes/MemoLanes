// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.16.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/api.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'map_renderer.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';
import 'storage.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw);

  @protected
  RenderResult dco_decode_box_autoadd_render_result(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  int dco_decode_i_64(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<RawDataFile> dco_decode_list_raw_data_file(dynamic raw);

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw);

  @protected
  RenderResult? dco_decode_opt_box_autoadd_render_result(dynamic raw);

  @protected
  RawDataFile dco_decode_raw_data_file(dynamic raw);

  @protected
  RenderResult dco_decode_render_result(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  RenderResult sse_decode_box_autoadd_render_result(
      SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  int sse_decode_i_64(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<RawDataFile> sse_decode_list_raw_data_file(SseDeserializer deserializer);

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  RenderResult? sse_decode_opt_box_autoadd_render_result(
      SseDeserializer deserializer);

  @protected
  RawDataFile sse_decode_raw_data_file(SseDeserializer deserializer);

  @protected
  RenderResult sse_decode_render_result(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Float> cst_encode_box_autoadd_f_32(double raw) {
    return wire.cst_new_box_autoadd_f_32(cst_encode_f_32(raw));
  }

  @protected
  ffi.Pointer<wire_cst_render_result> cst_encode_box_autoadd_render_result(
      RenderResult raw) {
    final ptr = wire.cst_new_box_autoadd_render_result();
    cst_api_fill_to_wire_render_result(raw, ptr.ref);
    return ptr;
  }

  @protected
  int cst_encode_i_64(int raw) {
    return raw.toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_raw_data_file> cst_encode_list_raw_data_file(
      List<RawDataFile> raw) {
    final ans = wire.cst_new_list_raw_data_file(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_raw_data_file(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<ffi.Float> cst_encode_opt_box_autoadd_f_32(double? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_f_32(raw);
  }

  @protected
  ffi.Pointer<wire_cst_render_result> cst_encode_opt_box_autoadd_render_result(
      RenderResult? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_render_result(raw);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_render_result(
      RenderResult apiObj, ffi.Pointer<wire_cst_render_result> wireObj) {
    cst_api_fill_to_wire_render_result(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_raw_data_file(
      RawDataFile apiObj, wire_cst_raw_data_file wireObj) {
    wireObj.name = cst_encode_String(apiObj.name);
    wireObj.path = cst_encode_String(apiObj.path);
  }

  @protected
  void cst_api_fill_to_wire_render_result(
      RenderResult apiObj, wire_cst_render_result wireObj) {
    wireObj.left = cst_encode_f_64(apiObj.left);
    wireObj.top = cst_encode_f_64(apiObj.top);
    wireObj.right = cst_encode_f_64(apiObj.right);
    wireObj.bottom = cst_encode_f_64(apiObj.bottom);
    wireObj.data = cst_encode_list_prim_u_8_strict(apiObj.data);
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  double cst_encode_f_32(double raw);

  @protected
  double cst_encode_f_64(double raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_render_result(
      RenderResult self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_raw_data_file(
      List<RawDataFile> self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_render_result(
      RenderResult? self, SseSerializer serializer);

  @protected
  void sse_encode_raw_data_file(RawDataFile self, SseSerializer serializer);

  @protected
  void sse_encode_render_result(RenderResult self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void dart_fn_deliver_output(
    int call_id,
    ffi.Pointer<ffi.Uint8> ptr_,
    int rust_vec_len_,
    int data_len_,
  ) {
    return _dart_fn_deliver_output(
      call_id,
      ptr_,
      rust_vec_len_,
      data_len_,
    );
  }

  late final _dart_fn_deliver_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32,
              ffi.Int32)>>('frbgen_project_dv_dart_fn_deliver_output');
  late final _dart_fn_deliver_output = _dart_fn_deliver_outputPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void wire_finalize_ongoing_journey(
    int port_,
  ) {
    return _wire_finalize_ongoing_journey(
      port_,
    );
  }

  late final _wire_finalize_ongoing_journeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_project_dv_wire_finalize_ongoing_journey');
  late final _wire_finalize_ongoing_journey =
      _wire_finalize_ongoing_journeyPtr.asFunction<void Function(int)>();

  void wire_get_raw_data_mode(
    int port_,
  ) {
    return _wire_get_raw_data_mode(
      port_,
    );
  }

  late final _wire_get_raw_data_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_project_dv_wire_get_raw_data_mode');
  late final _wire_get_raw_data_mode =
      _wire_get_raw_data_modePtr.asFunction<void Function(int)>();

  void wire_init(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> temp_dir,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> doc_dir,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> support_dir,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> cache_dir,
  ) {
    return _wire_init(
      port_,
      temp_dir,
      doc_dir,
      support_dir,
      cache_dir,
    );
  }

  late final _wire_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_project_dv_wire_init');
  late final _wire_init = _wire_initPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_list_all_raw_data(
    int port_,
  ) {
    return _wire_list_all_raw_data(
      port_,
    );
  }

  late final _wire_list_all_raw_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_project_dv_wire_list_all_raw_data');
  late final _wire_list_all_raw_data =
      _wire_list_all_raw_dataPtr.asFunction<void Function(int)>();

  void wire_on_location_update(
    int port_,
    double latitude,
    double longitude,
    int timestamp_ms,
    double accuracy,
    ffi.Pointer<ffi.Float> altitude,
    ffi.Pointer<ffi.Float> speed,
  ) {
    return _wire_on_location_update(
      port_,
      latitude,
      longitude,
      timestamp_ms,
      accuracy,
      altitude,
      speed,
    );
  }

  late final _wire_on_location_updatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Double, ffi.Double, ffi.Int64,
                  ffi.Float, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>>(
      'frbgen_project_dv_wire_on_location_update');
  late final _wire_on_location_update = _wire_on_location_updatePtr.asFunction<
      void Function(int, double, double, int, double, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>)>();

  void wire_render_map_overlay(
    int port_,
    double zoom,
    double left,
    double top,
    double right,
    double bottom,
  ) {
    return _wire_render_map_overlay(
      port_,
      zoom,
      left,
      top,
      right,
      bottom,
    );
  }

  late final _wire_render_map_overlayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Float,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('frbgen_project_dv_wire_render_map_overlay');
  late final _wire_render_map_overlay = _wire_render_map_overlayPtr
      .asFunction<void Function(int, double, double, double, double, double)>();

  void wire_toggle_raw_data_mode(
    int port_,
    bool enable,
  ) {
    return _wire_toggle_raw_data_mode(
      port_,
      enable,
    );
  }

  late final _wire_toggle_raw_data_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'frbgen_project_dv_wire_toggle_raw_data_mode');
  late final _wire_toggle_raw_data_mode =
      _wire_toggle_raw_data_modePtr.asFunction<void Function(int, bool)>();

  ffi.Pointer<ffi.Float> cst_new_box_autoadd_f_32(
    double value,
  ) {
    return _cst_new_box_autoadd_f_32(
      value,
    );
  }

  late final _cst_new_box_autoadd_f_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Float> Function(ffi.Float)>>(
          'frbgen_project_dv_cst_new_box_autoadd_f_32');
  late final _cst_new_box_autoadd_f_32 = _cst_new_box_autoadd_f_32Ptr
      .asFunction<ffi.Pointer<ffi.Float> Function(double)>();

  ffi.Pointer<wire_cst_render_result> cst_new_box_autoadd_render_result() {
    return _cst_new_box_autoadd_render_result();
  }

  late final _cst_new_box_autoadd_render_resultPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_render_result> Function()>>(
      'frbgen_project_dv_cst_new_box_autoadd_render_result');
  late final _cst_new_box_autoadd_render_result =
      _cst_new_box_autoadd_render_resultPtr
          .asFunction<ffi.Pointer<wire_cst_render_result> Function()>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(
              ffi.Int32)>>('frbgen_project_dv_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_raw_data_file> cst_new_list_raw_data_file(
    int len,
  ) {
    return _cst_new_list_raw_data_file(
      len,
    );
  }

  late final _cst_new_list_raw_data_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_raw_data_file> Function(
              ffi.Int32)>>('frbgen_project_dv_cst_new_list_raw_data_file');
  late final _cst_new_list_raw_data_file = _cst_new_list_raw_data_filePtr
      .asFunction<ffi.Pointer<wire_cst_list_raw_data_file> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_render_result extends ffi.Struct {
  @ffi.Double()
  external double left;

  @ffi.Double()
  external double top;

  @ffi.Double()
  external double right;

  @ffi.Double()
  external double bottom;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_raw_data_file extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> name;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> path;
}

final class wire_cst_list_raw_data_file extends ffi.Struct {
  external ffi.Pointer<wire_cst_raw_data_file> ptr;

  @ffi.Int32()
  external int len;
}

const int TILE_WIDTH_OFFSET = 7;

const int TILE_WIDTH = 128;

const int BITMAP_WIDTH_OFFSET = 6;

const int BITMAP_WIDTH = 64;

const int BITMAP_SIZE = 512;

const int ZSTD_COMPRESS_LEVEL = 3;

const int DEFAULT_VIEW_SIZE_POWER = 8;
