// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.16.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'map_renderer.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';
import 'storage.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw);

  @protected
  RenderResult dco_decode_box_autoadd_render_result(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  int dco_decode_i_64(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<RawDataFile> dco_decode_list_raw_data_file(dynamic raw);

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw);

  @protected
  RenderResult? dco_decode_opt_box_autoadd_render_result(dynamic raw);

  @protected
  RawDataFile dco_decode_raw_data_file(dynamic raw);

  @protected
  RenderResult dco_decode_render_result(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  RenderResult sse_decode_box_autoadd_render_result(
      SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  int sse_decode_i_64(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<RawDataFile> sse_decode_list_raw_data_file(SseDeserializer deserializer);

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  RenderResult? sse_decode_opt_box_autoadd_render_result(
      SseDeserializer deserializer);

  @protected
  RawDataFile sse_decode_raw_data_file(SseDeserializer deserializer);

  @protected
  RenderResult sse_decode_render_result(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  String cst_encode_String(String raw) {
    return raw;
  }

  @protected
  double cst_encode_box_autoadd_f_32(double raw) {
    return cst_encode_f_32(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_render_result(RenderResult raw) {
    return cst_encode_render_result(raw);
  }

  @protected
  Object cst_encode_i_64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  Uint8List cst_encode_list_prim_u_8_strict(Uint8List raw) {
    return raw;
  }

  @protected
  List<dynamic> cst_encode_list_raw_data_file(List<RawDataFile> raw) {
    return raw.map(cst_encode_raw_data_file).toList();
  }

  @protected
  double? cst_encode_opt_box_autoadd_f_32(double? raw) {
    return raw == null ? null : cst_encode_box_autoadd_f_32(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_render_result(RenderResult? raw) {
    return raw == null ? null : cst_encode_box_autoadd_render_result(raw);
  }

  @protected
  List<dynamic> cst_encode_raw_data_file(RawDataFile raw) {
    return [cst_encode_String(raw.name), cst_encode_String(raw.path)];
  }

  @protected
  List<dynamic> cst_encode_render_result(RenderResult raw) {
    return [
      cst_encode_f_64(raw.left),
      cst_encode_f_64(raw.top),
      cst_encode_f_64(raw.right),
      cst_encode_f_64(raw.bottom),
      cst_encode_list_prim_u_8_strict(raw.data)
    ];
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  double cst_encode_f_32(double raw);

  @protected
  double cst_encode_f_64(double raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_render_result(
      RenderResult self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_raw_data_file(
      List<RawDataFile> self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_render_result(
      RenderResult? self, SseSerializer serializer);

  @protected
  void sse_encode_raw_data_file(RawDataFile self, SseSerializer serializer);

  @protected
  void sse_encode_render_result(RenderResult self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire extends BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);

  void dart_fn_deliver_output(int call_id, PlatformGeneralizedUint8ListPtr ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.dart_fn_deliver_output(
          call_id, ptr_, rust_vec_len_, data_len_);

  void wire_finalize_ongoing_journey(NativePortType port_) =>
      wasmModule.wire_finalize_ongoing_journey(port_);

  void wire_get_raw_data_mode(NativePortType port_) =>
      wasmModule.wire_get_raw_data_mode(port_);

  void wire_init(NativePortType port_, String temp_dir, String doc_dir,
          String support_dir, String cache_dir) =>
      wasmModule.wire_init(port_, temp_dir, doc_dir, support_dir, cache_dir);

  void wire_list_all_raw_data(NativePortType port_) =>
      wasmModule.wire_list_all_raw_data(port_);

  void wire_on_location_update(
          NativePortType port_,
          double latitude,
          double longitude,
          Object timestamp_ms,
          double accuracy,
          double? altitude,
          double? speed) =>
      wasmModule.wire_on_location_update(
          port_, latitude, longitude, timestamp_ms, accuracy, altitude, speed);

  void wire_render_map_overlay(NativePortType port_, double zoom, double left,
          double top, double right, double bottom) =>
      wasmModule.wire_render_map_overlay(port_, zoom, left, top, right, bottom);

  void wire_toggle_raw_data_mode(NativePortType port_, bool enable) =>
      wasmModule.wire_toggle_raw_data_mode(port_, enable);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
class RustLibWasmModule implements WasmModule {
  @override
  external Object /* Promise */ call([String? moduleName]);

  @override
  external RustLibWasmModule bind(dynamic thisArg, String moduleName);

  external void dart_fn_deliver_output(int call_id,
      PlatformGeneralizedUint8ListPtr ptr_, int rust_vec_len_, int data_len_);

  external void wire_finalize_ongoing_journey(NativePortType port_);

  external void wire_get_raw_data_mode(NativePortType port_);

  external void wire_init(NativePortType port_, String temp_dir, String doc_dir,
      String support_dir, String cache_dir);

  external void wire_list_all_raw_data(NativePortType port_);

  external void wire_on_location_update(
      NativePortType port_,
      double latitude,
      double longitude,
      Object timestamp_ms,
      double accuracy,
      double? altitude,
      double? speed);

  external void wire_render_map_overlay(NativePortType port_, double zoom,
      double left, double top, double right, double bottom);

  external void wire_toggle_raw_data_mode(NativePortType port_, bool enable);
}
