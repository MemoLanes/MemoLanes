// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.16.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'map_renderer.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'storage.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> finalizeOngoingJourney({dynamic hint});

  Future<bool> getRawDataMode({dynamic hint});

  Future<void> init(
      {required String tempDir,
      required String docDir,
      required String supportDir,
      required String cacheDir,
      dynamic hint});

  Future<List<RawDataFile>> listAllRawData({dynamic hint});

  Future<void> onLocationUpdate(
      {required double latitude,
      required double longitude,
      required int timestampMs,
      required double accuracy,
      double? altitude,
      double? speed,
      dynamic hint});

  Future<RenderResult?> renderMapOverlay(
      {required double zoom,
      required double left,
      required double top,
      required double right,
      required double bottom,
      dynamic hint});

  Future<void> toggleRawDataMode({required bool enable, dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> finalizeOngoingJourney({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_finalize_ongoing_journey(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFinalizeOngoingJourneyConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFinalizeOngoingJourneyConstMeta => const TaskConstMeta(
        debugName: "finalize_ongoing_journey",
        argNames: [],
      );

  @override
  Future<bool> getRawDataMode({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_raw_data_mode(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kGetRawDataModeConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetRawDataModeConstMeta => const TaskConstMeta(
        debugName: "get_raw_data_mode",
        argNames: [],
      );

  @override
  Future<void> init(
      {required String tempDir,
      required String docDir,
      required String supportDir,
      required String cacheDir,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(tempDir);
        var arg1 = cst_encode_String(docDir);
        var arg2 = cst_encode_String(supportDir);
        var arg3 = cst_encode_String(cacheDir);
        return wire.wire_init(port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitConstMeta,
      argValues: [tempDir, docDir, supportDir, cacheDir],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitConstMeta => const TaskConstMeta(
        debugName: "init",
        argNames: ["tempDir", "docDir", "supportDir", "cacheDir"],
      );

  @override
  Future<List<RawDataFile>> listAllRawData({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_list_all_raw_data(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_raw_data_file,
        decodeErrorData: null,
      ),
      constMeta: kListAllRawDataConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListAllRawDataConstMeta => const TaskConstMeta(
        debugName: "list_all_raw_data",
        argNames: [],
      );

  @override
  Future<void> onLocationUpdate(
      {required double latitude,
      required double longitude,
      required int timestampMs,
      required double accuracy,
      double? altitude,
      double? speed,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_f_64(latitude);
        var arg1 = cst_encode_f_64(longitude);
        var arg2 = cst_encode_i_64(timestampMs);
        var arg3 = cst_encode_f_32(accuracy);
        var arg4 = cst_encode_opt_box_autoadd_f_32(altitude);
        var arg5 = cst_encode_opt_box_autoadd_f_32(speed);
        return wire.wire_on_location_update(
            port_, arg0, arg1, arg2, arg3, arg4, arg5);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOnLocationUpdateConstMeta,
      argValues: [latitude, longitude, timestampMs, accuracy, altitude, speed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOnLocationUpdateConstMeta => const TaskConstMeta(
        debugName: "on_location_update",
        argNames: [
          "latitude",
          "longitude",
          "timestampMs",
          "accuracy",
          "altitude",
          "speed"
        ],
      );

  @override
  Future<RenderResult?> renderMapOverlay(
      {required double zoom,
      required double left,
      required double top,
      required double right,
      required double bottom,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_f_32(zoom);
        var arg1 = cst_encode_f_64(left);
        var arg2 = cst_encode_f_64(top);
        var arg3 = cst_encode_f_64(right);
        var arg4 = cst_encode_f_64(bottom);
        return wire.wire_render_map_overlay(
            port_, arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_render_result,
        decodeErrorData: null,
      ),
      constMeta: kRenderMapOverlayConstMeta,
      argValues: [zoom, left, top, right, bottom],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRenderMapOverlayConstMeta => const TaskConstMeta(
        debugName: "render_map_overlay",
        argNames: ["zoom", "left", "top", "right", "bottom"],
      );

  @override
  Future<void> toggleRawDataMode({required bool enable, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_bool(enable);
        return wire.wire_toggle_raw_data_mode(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kToggleRawDataModeConstMeta,
      argValues: [enable],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kToggleRawDataModeConstMeta => const TaskConstMeta(
        debugName: "toggle_raw_data_mode",
        argNames: ["enable"],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    return raw as bool;
  }

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw) {
    return raw as double;
  }

  @protected
  RenderResult dco_decode_box_autoadd_render_result(dynamic raw) {
    return dco_decode_render_result(raw);
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    return raw as double;
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    return raw as Uint8List;
  }

  @protected
  List<RawDataFile> dco_decode_list_raw_data_file(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_raw_data_file).toList();
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_f_32(raw);
  }

  @protected
  RenderResult? dco_decode_opt_box_autoadd_render_result(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_render_result(raw);
  }

  @protected
  RawDataFile dco_decode_raw_data_file(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RawDataFile(
      name: dco_decode_String(arr[0]),
      path: dco_decode_String(arr[1]),
    );
  }

  @protected
  RenderResult dco_decode_render_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return RenderResult(
      left: dco_decode_f_64(arr[0]),
      top: dco_decode_f_64(arr[1]),
      right: dco_decode_f_64(arr[2]),
      bottom: dco_decode_f_64(arr[3]),
      data: dco_decode_list_prim_u_8_strict(arr[4]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer) {
    return (sse_decode_f_32(deserializer));
  }

  @protected
  RenderResult sse_decode_box_autoadd_render_result(
      SseDeserializer deserializer) {
    return (sse_decode_render_result(deserializer));
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    return deserializer.buffer.getInt64();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<RawDataFile> sse_decode_list_raw_data_file(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RawDataFile>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_raw_data_file(deserializer));
    }
    return ans_;
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RenderResult? sse_decode_opt_box_autoadd_render_result(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_render_result(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RawDataFile sse_decode_raw_data_file(SseDeserializer deserializer) {
    var var_name = sse_decode_String(deserializer);
    var var_path = sse_decode_String(deserializer);
    return RawDataFile(name: var_name, path: var_path);
  }

  @protected
  RenderResult sse_decode_render_result(SseDeserializer deserializer) {
    var var_left = sse_decode_f_64(deserializer);
    var var_top = sse_decode_f_64(deserializer);
    var var_right = sse_decode_f_64(deserializer);
    var var_bottom = sse_decode_f_64(deserializer);
    var var_data = sse_decode_list_prim_u_8_strict(deserializer);
    return RenderResult(
        left: var_left,
        top: var_top,
        right: var_right,
        bottom: var_bottom,
        data: var_data);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    return raw;
  }

  @protected
  double cst_encode_f_32(double raw) {
    return raw;
  }

  @protected
  double cst_encode_f_64(double raw) {
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    return raw;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer) {
    sse_encode_f_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_render_result(
      RenderResult self, SseSerializer serializer) {
    sse_encode_render_result(self, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_raw_data_file(
      List<RawDataFile> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_raw_data_file(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_render_result(
      RenderResult? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_render_result(self, serializer);
    }
  }

  @protected
  void sse_encode_raw_data_file(RawDataFile self, SseSerializer serializer) {
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.path, serializer);
  }

  @protected
  void sse_encode_render_result(RenderResult self, SseSerializer serializer) {
    sse_encode_f_64(self.left, serializer);
    sse_encode_f_64(self.top, serializer);
    sse_encode_f_64(self.right, serializer);
    sse_encode_f_64(self.bottom, serializer);
    sse_encode_list_prim_u_8_strict(self.data, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {}

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }
}
