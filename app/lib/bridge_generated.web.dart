// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class NativePlatform extends FlutterRustBridgeBase<NativeWire>
    with FlutterRustBridgeSetupMixin {
  NativePlatform(FutureOr<WasmModule> dylib) : super(NativeWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  double api2wire_box_autoadd_f32(double raw) {
    return api2wire_f32(raw);
  }

  @protected
  Object api2wire_i64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  double? api2wire_opt_box_autoadd_f32(double? raw) {
    return raw == null ? null : api2wire_box_autoadd_f32(raw);
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }
// Section: finalizer
}

// Section: WASM wire module

@JS('wasm_bindgen')
external NativeWasmModule get wasmModule;

@JS()
@anonymous
class NativeWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external NativeWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_init(NativePortType port_, String temp_dir,
      String doc_dir, String support_dir, String cache_dir);

  external dynamic /* void */ wire_render_map_overlay(NativePortType port_,
      double zoom, double left, double top, double right, double bottom);

  external dynamic /* void */ wire_on_location_update(
      NativePortType port_,
      double latitude,
      double longitude,
      Object timestamp_ms,
      double accuracy,
      double? altitude,
      double? speed);

  external dynamic /* void */ wire_list_all_raw_data(NativePortType port_);

  external dynamic /* void */ wire_get_raw_data_mode(NativePortType port_);

  external dynamic /* void */ wire_toggle_raw_data_mode(
      NativePortType port_, bool enable);

  external dynamic /* void */ wire_finalize_ongoing_journey(
      NativePortType port_);
}

// Section: WASM wire connector

class NativeWire extends FlutterRustBridgeWasmWireBase<NativeWasmModule> {
  NativeWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<NativeWasmModule>(module));

  void wire_init(NativePortType port_, String temp_dir, String doc_dir,
          String support_dir, String cache_dir) =>
      wasmModule.wire_init(port_, temp_dir, doc_dir, support_dir, cache_dir);

  void wire_render_map_overlay(NativePortType port_, double zoom, double left,
          double top, double right, double bottom) =>
      wasmModule.wire_render_map_overlay(port_, zoom, left, top, right, bottom);

  void wire_on_location_update(
          NativePortType port_,
          double latitude,
          double longitude,
          Object timestamp_ms,
          double accuracy,
          double? altitude,
          double? speed) =>
      wasmModule.wire_on_location_update(
          port_, latitude, longitude, timestamp_ms, accuracy, altitude, speed);

  void wire_list_all_raw_data(NativePortType port_) =>
      wasmModule.wire_list_all_raw_data(port_);

  void wire_get_raw_data_mode(NativePortType port_) =>
      wasmModule.wire_get_raw_data_mode(port_);

  void wire_toggle_raw_data_mode(NativePortType port_, bool enable) =>
      wasmModule.wire_toggle_raw_data_mode(port_, enable);

  void wire_finalize_ongoing_journey(NativePortType port_) =>
      wasmModule.wire_finalize_ongoing_journey(port_);
}
