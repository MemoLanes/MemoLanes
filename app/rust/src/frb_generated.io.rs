// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.16.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<f32> for *mut f32 {
    fn cst_decode(self) -> f32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::map_renderer::RenderResult> for *mut wire_cst_render_result {
    fn cst_decode(self) -> crate::map_renderer::RenderResult {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::map_renderer::RenderResult>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<crate::storage::RawDataFile>> for *mut wire_cst_list_raw_data_file {
    fn cst_decode(self) -> Vec<crate::storage::RawDataFile> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<crate::storage::RawDataFile> for wire_cst_raw_data_file {
    fn cst_decode(self) -> crate::storage::RawDataFile {
        crate::storage::RawDataFile {
            name: self.name.cst_decode(),
            path: self.path.cst_decode(),
        }
    }
}
impl CstDecode<crate::map_renderer::RenderResult> for wire_cst_render_result {
    fn cst_decode(self) -> crate::map_renderer::RenderResult {
        crate::map_renderer::RenderResult {
            left: self.left.cst_decode(),
            top: self.top.cst_decode(),
            right: self.right.cst_decode(),
            bottom: self.bottom.cst_decode(),
            data: self.data.cst_decode(),
        }
    }
}
pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}
impl NewWithNullPtr for wire_cst_raw_data_file {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            path: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_raw_data_file {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_render_result {
    fn new_with_null_ptr() -> Self {
        Self {
            left: Default::default(),
            top: Default::default(),
            right: Default::default(),
            bottom: Default::default(),
            data: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_render_result {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frbgen_project_dv_dart_fn_deliver_output(
    call_id: i32,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[no_mangle]
pub extern "C" fn frbgen_project_dv_wire_finalize_ongoing_journey(port_: i64) {
    wire_finalize_ongoing_journey_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_project_dv_wire_get_raw_data_mode(port_: i64) {
    wire_get_raw_data_mode_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_project_dv_wire_init(
    port_: i64,
    temp_dir: *mut wire_cst_list_prim_u_8_strict,
    doc_dir: *mut wire_cst_list_prim_u_8_strict,
    support_dir: *mut wire_cst_list_prim_u_8_strict,
    cache_dir: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_init_impl(port_, temp_dir, doc_dir, support_dir, cache_dir)
}

#[no_mangle]
pub extern "C" fn frbgen_project_dv_wire_list_all_raw_data(port_: i64) {
    wire_list_all_raw_data_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_project_dv_wire_on_location_update(
    port_: i64,
    latitude: f64,
    longitude: f64,
    timestamp_ms: i64,
    accuracy: f32,
    altitude: *mut f32,
    speed: *mut f32,
) {
    wire_on_location_update_impl(
        port_,
        latitude,
        longitude,
        timestamp_ms,
        accuracy,
        altitude,
        speed,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_project_dv_wire_render_map_overlay(
    port_: i64,
    zoom: f32,
    left: f64,
    top: f64,
    right: f64,
    bottom: f64,
) {
    wire_render_map_overlay_impl(port_, zoom, left, top, right, bottom)
}

#[no_mangle]
pub extern "C" fn frbgen_project_dv_wire_toggle_raw_data_mode(port_: i64, enable: bool) {
    wire_toggle_raw_data_mode_impl(port_, enable)
}

#[no_mangle]
pub extern "C" fn frbgen_project_dv_cst_new_box_autoadd_f_32(value: f32) -> *mut f32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_project_dv_cst_new_box_autoadd_render_result(
) -> *mut wire_cst_render_result {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_render_result::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_project_dv_cst_new_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_strict {
    let ans = wire_cst_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_project_dv_cst_new_list_raw_data_file(
    len: i32,
) -> *mut wire_cst_list_raw_data_file {
    let wrap = wire_cst_list_raw_data_file {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_raw_data_file>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_strict {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_raw_data_file {
    ptr: *mut wire_cst_raw_data_file,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_raw_data_file {
    name: *mut wire_cst_list_prim_u_8_strict,
    path: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_render_result {
    left: f64,
    top: f64,
    right: f64,
    bottom: f64,
    data: *mut wire_cst_list_prim_u_8_strict,
}
