// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.16.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::for_generated::wasm_bindgen;
use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl<T> CstDecode<Option<T>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
where
    JsValue: CstDecode<T>,
{
    fn cst_decode(self) -> Option<T> {
        (!self.is_null() && !self.is_undefined()).then(|| self.cst_decode())
    }
}
impl CstDecode<String> for String {
    fn cst_decode(self) -> String {
        self
    }
}
impl CstDecode<Vec<u8>> for Box<[u8]> {
    fn cst_decode(self) -> Vec<u8> {
        self.into_vec()
    }
}
impl CstDecode<Vec<crate::storage::RawDataFile>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::storage::RawDataFile> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<crate::storage::RawDataFile>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::storage::RawDataFile {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::storage::RawDataFile {
            name: self_.get(0).cst_decode(),
            path: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::map_renderer::RenderResult>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::map_renderer::RenderResult {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            5,
            "Expected 5 elements, got {}",
            self_.length()
        );
        crate::map_renderer::RenderResult {
            left: self_.get(0).cst_decode(),
            top: self_.get(1).cst_decode(),
            right: self_.get(2).cst_decode(),
            bottom: self_.get(3).cst_decode(),
            data: self_.get(4).cst_decode(),
        }
    }
}
impl CstDecode<String> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> String {
        self.as_string().expect("non-UTF-8 string, or not a string")
    }
}
impl CstDecode<bool> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> bool {
        self.is_truthy()
    }
}
impl CstDecode<f32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> f32 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<f64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> f64 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<i64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> i64 {
        ::std::convert::TryInto::try_into(
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::BigInt>()
                .unwrap(),
        )
        .unwrap()
    }
}
impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<u8> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u8 {
        self.unchecked_into_f64() as _
    }
}

#[wasm_bindgen]
pub fn dart_fn_deliver_output(
    call_id: i32,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[wasm_bindgen]
pub fn wire_finalize_ongoing_journey(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_finalize_ongoing_journey_impl(port_)
}

#[wasm_bindgen]
pub fn wire_get_raw_data_mode(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_get_raw_data_mode_impl(port_)
}

#[wasm_bindgen]
pub fn wire_init(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    temp_dir: String,
    doc_dir: String,
    support_dir: String,
    cache_dir: String,
) {
    wire_init_impl(port_, temp_dir, doc_dir, support_dir, cache_dir)
}

#[wasm_bindgen]
pub fn wire_list_all_raw_data(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_list_all_raw_data_impl(port_)
}

#[wasm_bindgen]
pub fn wire_on_location_update(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    latitude: f64,
    longitude: f64,
    timestamp_ms: i64,
    accuracy: f32,
    altitude: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    speed: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_on_location_update_impl(
        port_,
        latitude,
        longitude,
        timestamp_ms,
        accuracy,
        altitude,
        speed,
    )
}

#[wasm_bindgen]
pub fn wire_render_map_overlay(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    zoom: f32,
    left: f64,
    top: f64,
    right: f64,
    bottom: f64,
) {
    wire_render_map_overlay_impl(port_, zoom, left, top, right, bottom)
}

#[wasm_bindgen]
pub fn wire_toggle_raw_data_mode(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    enable: bool,
) {
    wire_toggle_raw_data_mode_impl(port_, enable)
}
